{
  "openapi": "3.0.3",
  "info": {
    "title": "SAM Example API",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "debug",
      "description": "Debug endpoints"
    },
    {
      "name": "mock",
      "description": "Mock endpoints"
    },
    {
      "name": "features",
      "description": "Feature demos"
    }
  ],
  "security": [
    {
      "EpilotAuth": []
    }
  ],
  "paths": {
    "/v1/ts-sam/public/debug": {
      "get": {
        "operationId": "debugPublicGet",
        "summary": "debugPublicGet",
        "description": "Public endpoint, returns the OpenAPI context",
        "tags": [
          "debug"
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "operationId": "debugPublicPost",
        "summary": "debugPublicPost",
        "description": "Public endpoint, returns the OpenAPI context",
        "tags": [
          "debug"
        ],
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v1/ts-sam/debug": {
      "get": {
        "operationId": "debugPrivateGet",
        "summary": "debugPrivateGet",
        "description": "Private endpoint, returns the OpenAPI context",
        "tags": [
          "debug"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "operationId": "debugPrivatePost",
        "summary": "debugPrivatePost",
        "description": "Private endpoint, returns the OpenAPI context",
        "tags": [
          "debug"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v1/ts-sam/mock/hello-world": {
      "get": {
        "operationId": "mockOperation",
        "summary": "mockOperation",
        "description": "Mock response from OAS definition",
        "tags": [
          "mock"
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hello": {
                      "type": "string",
                      "example": "world"
                    },
                    "test": {
                      "type": "string",
                      "example": "test"
                    }
                  },
                  "required": [
                    "hello"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/ts-sam/mock/validate": {
      "post": {
        "operationId": "validateOperation",
        "summary": "validateOperation",
        "description": "Validate inputs with OAS definition",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "requiredEmail": {
                    "type": "string",
                    "format": "email"
                  },
                  "requiredString": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 12
                  },
                  "requiredPositiveInteger": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 900
                  }
                },
                "required": [
                  "requiredString",
                  "requiredPositiveInteger"
                ]
              }
            }
          }
        },
        "tags": [
          "mock"
        ],
        "responses": {
          "201": {
            "description": "Validation Success",
            "content": {
              "application/json": {
                "example": {
                  "status": 201,
                  "success": true
                }
              }
            }
          },
          "400": {
            "description": "Validation Fail",
            "content": {
              "application/json": {
                "example": {
                  "status": 400,
                  "error": [
                    {
                      "keyword": "required",
                      "dataPath": ".requestBody",
                      "schemaPath": "#/properties/requestBody/required",
                      "params": {
                        "missingProperty": "requiredString"
                      },
                      "message": "should have required property 'requiredString'"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/v1/ts-sam/auth": {
      "get": {
        "operationId": "testAuth",
        "summary": "testAuth",
        "description": "Return auth context",
        "tags": [
          "features"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v1/ts-sam/dynamodb": {
      "get": {
        "operationId": "testDynamoDB",
        "summary": "testDynamoDB",
        "description": "Query DynamoDB Table",
        "tags": [
          "features"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v1/ts-sam/s3": {
      "get": {
        "operationId": "testS3",
        "summary": "testS3",
        "description": "Fetch object from S3 bucket",
        "tags": [
          "features"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v1/ts-sam/eventbridge": {
      "post": {
        "operationId": "testEventBridge",
        "summary": "testEventBridge",
        "description": "Put event to EventBridge Event Bus",
        "tags": [
          "features"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "ok"
          }
        }
      }
    },
    "/v1/ts-sam/sqs": {
      "get": {
        "operationId": "testSQS",
        "summary": "testSQS",
        "description": "Consume SQS queue (written to by EventBridge rule)",
        "tags": [
          "features"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v1/ts-sam/apigateway": {
      "get": {
        "operationId": "testApigateway",
        "summary": "testApigateway",
        "description": "Call another internal API via API gateway",
        "tags": [
          "features"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v1/ts-sam/hasura": {
      "get": {
        "operationId": "testHasura",
        "summary": "testHasura",
        "description": "Query Hasura",
        "tags": [
          "features"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v1/ts-sam/feature": {
      "get": {
        "operationId": "testFeature",
        "summary": "testFeature",
        "description": "Query Feature Flag Service",
        "tags": [
          "features"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v1/ts-sam/permissions": {
      "get": {
        "operationId": "testPermissions",
        "summary": "testPermissions",
        "description": "Test Permissions",
        "tags": [
          "features"
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "operationId": "testPermission",
        "summary": "testPermission",
        "description": "Test a single permission",
        "tags": [
          "features"
        ],
        "requestBody": {
          "description": "Permission to test",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string"
                  },
                  "resource": {
                    "type": "string"
                  },
                  "org_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "action"
                ],
                "example": {
                  "action": "entity:view",
                  "resource": "*"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "EpilotAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Authorization header with epilot OAuth2 bearer token",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "HelloWorldObject": {
        "type": "object",
        "properties": {
          "hello": {
            "type": "string",
            "example": "world"
          },
          "test": {
            "type": "string",
            "example": "test"
          }
        },
        "required": [
          "hello"
        ]
      }
    }
  }
}
