{
  "openapi": "3.0.3",
  "info": {
    "title": "Blueprint Manifest API",
    "version": "0.1.0",
    "description": "Service to create and install Blueprint Manifest files"
  },
  "tags": [
    {
      "name": "Jobs",
      "description": "Manage Export and Import Jobs"
    },
    {
      "name": "Export",
      "description": "Export a Blueprint Manifest"
    },
    {
      "name": "Import",
      "description": "Install or update a Blueprint Manifest"
    },
    {
      "name": "Manifests",
      "description": "Manage installed Manifests"
    }
  ],
  "security": [
    {
      "EpilotAuth": []
    }
  ],
  "servers": [
    {
      "url": "https://blueprint-manifest.sls.epilot.io"
    },
    {
      "url": "https://blueprint-manifest.sls.epilot.io"
    }
  ],
  "paths": {
    "/v1/blueprint-manifest/jobs/{job_id}": {
      "get": {
        "operationId": "getJob",
        "summary": "getJob",
        "description": "Get the current status of a blueprint (export or import)",
        "tags": [
          "Jobs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/JobID"
          }
        ],
        "responses": {
          "200": {
            "description": "Current status of the blueprint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          }
        }
      }
    },
    "/v1/blueprint-manifest/jobs:createExport": {
      "post": {
        "operationId": "createExport",
        "summary": "createExport",
        "description": "Creates a new Export Job with a list of available resources to export from the passed root resource.\n\nMultiple root resources can be added by calling this multiple times with the same jobId\n",
        "tags": [
          "Export"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "resourceType": {
                        "$ref": "#/components/schemas/ResourceNodeType"
                      },
                      "resourceIds": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "minItems": 1,
                        "maxItems": 50
                      },
                      "jobId": {
                        "$ref": "#/components/schemas/JobID"
                      },
                      "isExportingMultipleResources": {
                        "type": "boolean",
                        "description": "Temporary flag to indicate if multiple resources are being exported"
                      },
                      "pipelineId": {
                        "type": "string",
                        "description": "Pipeline ID selected when doing the sandbox sync"
                      }
                    },
                    "required": [
                      "resourceType",
                      "resourceIds"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "resources": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "$ref": "#/components/schemas/ResourceNodeType"
                            },
                            "id": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "id"
                          ]
                        },
                        "minItems": 1
                      },
                      "jobId": {
                        "$ref": "#/components/schemas/JobID"
                      },
                      "isExportingMultipleResources": {
                        "type": "boolean",
                        "description": "Temporary flag to indicate if multiple resources are being exported"
                      },
                      "pipelineId": {
                        "type": "string",
                        "description": "Pipeline ID selected when doing the sandbox sync"
                      }
                    },
                    "required": [
                      "resources"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created Export Job ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "$ref": "#/components/schemas/JobID"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/blueprint-manifest/jobs/{job_id}:exportManifest": {
      "post": {
        "operationId": "exportManifest",
        "summary": "exportManifest",
        "description": "Triggers exporting a manifest file using selected resoruce ids for a job created with `createExportJob`",
        "tags": [
          "Export"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/JobID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "selectedResourceIds": {
                    "description": "An array of resource IDs to export",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "resourceName": {
                    "type": "string",
                    "example": "journey_HouseConnectionJourney"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "markdown": {
                        "type": "object",
                        "properties": {
                          "manifest": {
                            "type": "string"
                          },
                          "preinstall": {
                            "type": "string"
                          },
                          "postinstall": {
                            "type": "string"
                          }
                        }
                      },
                      "docs_link": {
                        "type": "string"
                      },
                      "source_blueprint_name": {
                        "type": "string"
                      },
                      "source_blueprint_slug": {
                        "type": "string"
                      },
                      "source_blueprint_version": {
                        "type": "string"
                      }
                    }
                  },
                  "isExportingMultipleResources": {
                    "type": "boolean",
                    "description": "Temporary flag to indicate if multiple resources are being exported"
                  },
                  "generateAISummary": {
                    "type": "boolean",
                    "default": false
                  },
                  "language": {
                    "type": "string",
                    "enum": [
                      "en",
                      "de"
                    ]
                  }
                },
                "required": [
                  "resourceName",
                  "selectedResourceIds"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export Job ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "$ref": "#/components/schemas/JobID"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/blueprint-manifest:uploadManifest": {
      "post": {
        "operationId": "uploadManifest",
        "summary": "uploadManifest",
        "description": "Create pre-signed S3 URL to upload a manifest file.\n",
        "tags": [
          "Import"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadFilePayload"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pre-signed URL for POST / PUT upload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "s3ref": {
                      "$ref": "#/components/schemas/S3Reference"
                    },
                    "upload_url": {
                      "type": "string",
                      "format": "url",
                      "example": "https://epilot-dev-blueprints.s3.eu-central-1.amazonaws.com/templates/document.pdf"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/blueprint-manifest/jobs:createPlan": {
      "post": {
        "operationId": "createPlan",
        "summary": "createPlan",
        "description": "Creates a new import job from an uploaded manifest file and returns the plan.\n\nCreates an updated plan for an installed manifest when `manifest_id` is passed\n",
        "tags": [
          "Import"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "s3ref": {
                        "allOf": [
                          {
                            "description": "s3ref of manifest file uploaded via `uploadManifest`"
                          },
                          {
                            "$ref": "#/components/schemas/S3Reference"
                          }
                        ]
                      },
                      "manifest_id": {
                        "allOf": [
                          {
                            "description": "Update an existing manifest (optional)"
                          },
                          {
                            "$ref": "#/components/schemas/ManifestID"
                          }
                        ]
                      },
                      "source": {
                        "allOf": [
                          {
                            "description": "Source of the manifest"
                          },
                          {
                            "$ref": "#/components/schemas/ManifestSource"
                          }
                        ]
                      },
                      "resourcesToIgnore": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of resources to ignore changes for"
                      },
                      "resourceReplacements": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ResourceReplacement"
                        },
                        "description": "List of resource replacements to apply during import"
                      },
                      "deployedFrom": {
                        "type": "object",
                        "properties": {
                          "sourceOrganizationId": {
                            "type": "string"
                          },
                          "sourceManifestId": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "sourceOrganizationId",
                          "sourceManifestId"
                        ]
                      }
                    },
                    "required": [
                      "s3ref"
                    ]
                  },
                  {
                    "type": "object",
                    "deprecated": true,
                    "properties": {
                      "manifestFilePath": {
                        "deprecated": true,
                        "description": "Manifest s3 key uploaded via `uploadManifest`",
                        "type": "string"
                      },
                      "manifest_id": {
                        "allOf": [
                          {
                            "description": "Update an existing manifest (optional)"
                          },
                          {
                            "$ref": "#/components/schemas/ManifestID"
                          }
                        ]
                      },
                      "source": {
                        "allOf": [
                          {
                            "description": "Source of the manifest"
                          },
                          {
                            "$ref": "#/components/schemas/ManifestSource"
                          }
                        ]
                      },
                      "resourcesToIgnore": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "List of resources to ignore changes for"
                      },
                      "resourceReplacements": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ResourceReplacement"
                        },
                        "description": "List of resource replacements to apply during import"
                      },
                      "deployedFrom": {
                        "type": "object",
                        "properties": {
                          "sourceOrganizationId": {
                            "type": "string"
                          },
                          "sourceManifestId": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "sourceOrganizationId",
                          "sourceManifestId"
                        ]
                      }
                    },
                    "required": [
                      "manifestFilePath"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created Import Job ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "type": "string",
                      "example": "4854bb2a-94f9-424d-a968-3fb17fb0bf89"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/blueprint-manifest/jobs/{job_id}:applyPlan": {
      "post": {
        "operationId": "applyPlan",
        "summary": "applyPlan",
        "description": "Apply a plan returned by `createPlan`.",
        "tags": [
          "Import"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/JobID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "resourcesToIgnore": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of resources to ignore changes for"
                  },
                  "resourceReplacements": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ResourceReplacement"
                    },
                    "description": "List of resource replacements to apply during import"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Applied Import Job ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "jobId": {
                      "$ref": "#/components/schemas/JobID"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/blueprint-manifest/manifests": {
      "get": {
        "operationId": "listInstalledManifests",
        "summary": "listInstalledManifests",
        "description": "List Blueprint Manifests installed to the organization",
        "tags": [
          "Manifests"
        ],
        "responses": {
          "200": {
            "description": "Installed Blueprint Manifests in the organization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer",
                      "example": 1
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ManifestItem"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/blueprint-manifest/manifests/{manifest_id}": {
      "get": {
        "operationId": "getManifest",
        "summary": "getManifest",
        "description": "Get installed Manifest by ID",
        "tags": [
          "Manifests"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "manifest_id",
            "schema": {
              "$ref": "#/components/schemas/ManifestID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Installed Blueprint Manifest in the Organization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manifest"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "updateManifest",
        "summary": "updateManifest",
        "description": "Update an installed manifest\n",
        "tags": [
          "Manifests"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "manifest_id",
            "schema": {
              "$ref": "#/components/schemas/ManifestID"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutManifestPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated Manifest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manifest"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteManifest",
        "summary": "deleteManifest",
        "description": "Remove installed manifest from the org\n\nNote that this does not delete the installed resources of the Manifest!\n",
        "tags": [
          "Manifests"
        ],
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "manifest_id",
            "schema": {
              "$ref": "#/components/schemas/ManifestID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The deleted Manifest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Manifest"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ManifestID": {
        "type": "string",
        "description": "ID of an imported / installed manifest",
        "example": "c2d6cac8-bdd5-4ea2-8a6c-1cbdbe77b341"
      },
      "JobID": {
        "type": "string",
        "description": "ID of an import or export job (state machine)",
        "example": "4854bb2a-94f9-424d-a968-3fb17fb0bf89"
      },
      "ManifestSource": {
        "type": "string",
        "enum": [
          "file",
          "marketplace",
          "sandbox"
        ]
      },
      "Manifest": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "import_job_id": {
                "$ref": "#/components/schemas/JobID"
              },
              "previous_jobs_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of job IDs that were used to install the manifest"
              },
              "previous_jobs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Job"
                },
                "description": "List of jobs that were used to install the manifest"
              }
            }
          },
          {
            "$ref": "#/components/schemas/CommonManifestFields"
          },
          {
            "$ref": "#/components/schemas/CommonMarkdownFields"
          },
          {
            "$ref": "#/components/schemas/CommonImportFields"
          },
          {
            "$ref": "#/components/schemas/ManifestTimestampFields"
          }
        ]
      },
      "ManifestItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonManifestFields"
          },
          {
            "$ref": "#/components/schemas/ManifestTimestampFields"
          }
        ]
      },
      "JobStatus": {
        "type": "string",
        "enum": [
          "PENDING",
          "STARTED",
          "WAITING_USER_ACTION",
          "CANCELED",
          "IN_PROGRESS",
          "SUCCESS",
          "FAILED"
        ]
      },
      "ResourceNodeType": {
        "type": "string",
        "description": "Type of the resource",
        "enum": [
          "designbuilder",
          "journey",
          "product",
          "price",
          "tax",
          "automation_flow",
          "entity_mapping",
          "file",
          "emailtemplate",
          "schema",
          "schema_attribute",
          "schema_capability",
          "schema_group",
          "schema_group_headline",
          "workflow_definition",
          "closing_reason",
          "taxonomy_classification",
          "webhook",
          "custom_variable",
          "coupon",
          "usergroup",
          "saved_view",
          "app"
        ]
      },
      "PlanChanges": {
        "type": "array",
        "items": {
          "type": "string",
          "enum": [
            "create",
            "update",
            "no-op",
            "delete"
          ]
        }
      },
      "CommonResourceNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the resource"
          },
          "type": {
            "$ref": "#/components/schemas/ResourceNodeType"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource"
          },
          "source_id": {
            "type": "string",
            "description": "Source ID of the resource"
          },
          "is_virtual": {
            "type": "boolean",
            "description": "Whether the resource is virtual"
          }
        },
        "required": [
          "id",
          "type"
        ]
      },
      "RootResourceNode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResourceNode"
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "Terraform address of the resource"
              },
              "dependencies": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VirtualResourceNodeGroup"
                },
                "description": "Dependencies of the resource",
                "nullable": true
              },
              "changes": {
                "$ref": "#/components/schemas/PlanChanges"
              }
            }
          }
        ]
      },
      "VirtualResourceNodeGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResourceNode"
          },
          {
            "type": "object",
            "properties": {
              "dependencies": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceNode"
                }
              },
              "is_virtual": {
                "type": "boolean",
                "enum": [
                  true
                ]
              }
            }
          }
        ]
      },
      "ResourceNode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CommonResourceNode"
          },
          {
            "type": "object",
            "properties": {
              "address": {
                "type": "string",
                "description": "Terraform address of the resource"
              },
              "dependencies": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceNode"
                },
                "description": "Dependencies of the resource",
                "nullable": true
              },
              "parents": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "type": {
                      "$ref": "#/components/schemas/ResourceNodeType"
                    }
                  }
                }
              },
              "source_id": {
                "description": "Original ID of the exported resource",
                "type": "string"
              },
              "changes": {
                "$ref": "#/components/schemas/PlanChanges"
              }
            }
          }
        ]
      },
      "Job": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "job_id": {
                "$ref": "#/components/schemas/JobID"
              },
              "job_status": {
                "$ref": "#/components/schemas/JobStatus"
              },
              "manifest_file_path": {
                "type": "string",
                "description": "The S3 key of the manifest file"
              },
              "message": {
                "type": "string"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time"
              },
              "plan_file_content": {
                "type": "string",
                "description": "An URL to download the plan file"
              },
              "resources_to_export": {
                "description": "An array of tree-like JSON objects or a singular tree-like JSON object representing the resources to import",
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RootResourceNode"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/RootResourceNode"
                  }
                ]
              },
              "large_resources_to_export_url": {
                "type": "string",
                "description": "An URL to download the resources to export when the resources are too large to be included in the response"
              },
              "resources_to_import": {
                "description": "An array of tree-like JSON objects or a singular tree-like JSON object representing the resources to import",
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/RootResourceNode"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/RootResourceNode"
                  }
                ]
              },
              "large_resources_to_import_url": {
                "type": "string",
                "description": "An URL to download the resources to import when the resources are too large to be included in the response"
              },
              "resource_replacements": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResourceReplacement"
                }
              },
              "is_verified": {
                "type": "boolean",
                "description": "Whether the manifest comes from a trusted source and is signed by epilot"
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FormattedError"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/CommonImportFields"
          },
          {
            "$ref": "#/components/schemas/CommonMarkdownFields"
          },
          {
            "$ref": "#/components/schemas/CommonManifestFields"
          }
        ]
      },
      "UploadFilePayload": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "example": "example.manifest.zip"
          }
        },
        "required": [
          "filename"
        ]
      },
      "S3Reference": {
        "type": "object",
        "properties": {
          "bucket": {
            "type": "string",
            "example": "blueprint-manifest-prod-blueprintsv2bucket-sybpsryropzw"
          },
          "key": {
            "type": "string",
            "example": "templates/main.tf"
          }
        },
        "required": [
          "bucket",
          "key"
        ]
      },
      "CommonManifestFields": {
        "type": "object",
        "properties": {
          "manifest_id": {
            "$ref": "#/components/schemas/ManifestID"
          },
          "source_type": {
            "$ref": "#/components/schemas/ManifestSource"
          },
          "source_blueprint_name": {
            "type": "string",
            "example": "Solar B2B"
          },
          "source_blueprint_slug": {
            "type": "string",
            "description": "URL slug of a blueprint from the epilot marketplace",
            "example": "solar-b2b"
          },
          "source_blueprint_version": {
            "type": "string",
            "description": "Version of the blueprint (semver)",
            "example": "1.0.0"
          },
          "source_blueprint_file": {
            "type": "string",
            "deprecated": true,
            "description": "A URL to download the source blueprint file used to import the blueprint",
            "example": "https://blueprint-manifest-prod.s3.eu-central-1.amazonaws.com/manifest.zip"
          },
          "docs_link": {
            "type": "string",
            "description": "Link to the blueprint documentation",
            "example": "https://help.epilot.cloud"
          },
          "source_blueprint_file_ref": {
            "$ref": "#/components/schemas/S3Reference"
          },
          "install_status": {
            "$ref": "#/components/schemas/BlueprintInstallStatus"
          },
          "install_status_description": {
            "type": "string",
            "example": "This blueprint installation resulted in a partial deployment; some resources were created successfully, but  failed to complete the full resource setup."
          },
          "is_verified": {
            "type": "boolean",
            "description": "Whether the manifest comes from a trusted source and is signed by epilot"
          },
          "created_by": {
            "$ref": "#/components/schemas/CallerIdentity"
          },
          "updated_by": {
            "$ref": "#/components/schemas/CallerIdentity"
          },
          "manifest_version": {
            "type": "string",
            "description": "Version of the manifest (semver)",
            "example": "1.0.0"
          },
          "selected_resources_url": {
            "type": "string",
            "description": "All the resources that were selected to be exported, used to pre-select the resources when updating a sandbox manifest",
            "example": "https://blueprint-manifest-prod.s3.eu-central-1.amazonaws.com/selected_resources.json"
          },
          "ready_imported_resources_url": {
            "type": "string",
            "description": "All the resources that were marked as ready by the user",
            "example": "https://blueprint-manifest-prod.s3.eu-central-1.amazonaws.com/ready_imported_resources.json"
          },
          "deployed_from": {
            "type": "object",
            "properties": {
              "source_organization_id": {
                "type": "string",
                "description": "ID of the organization that deployed the manifest"
              },
              "source_manifest_id": {
                "type": "string",
                "description": "ID of the manifest that was deployed"
              },
              "last_triggered_at": {
                "type": "string",
                "format": "date-time",
                "description": "When the deployment was last triggered"
              }
            },
            "description": "Information about the manifest that was deployed from, used to update existing deployments instead of always creating new ones"
          }
        }
      },
      "ManifestTimestampFields": {
        "type": "object",
        "properties": {
          "created_at": {
            "description": "When the manifest was first installed (applied)",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "When the manifest was last updated (applied)",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CommonImportFields": {
        "type": "object",
        "properties": {
          "source_type": {
            "$ref": "#/components/schemas/ManifestSource"
          },
          "imported_resources": {
            "description": "An array of tree-like JSON objects or a singular tree-like JSON object representing the resources to import",
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RootResourceNode"
                }
              },
              {
                "$ref": "#/components/schemas/RootResourceNode"
              }
            ]
          },
          "large_imported_resources_url": {
            "type": "string",
            "format": "uri",
            "description": "An URL to download the imported resources when the resources are too large to be included in the response",
            "example": "https://blueprint-manifest-prod.s3.eu-central-1.amazonaws.com/large.json"
          }
        }
      },
      "CommonMarkdownFields": {
        "type": "object",
        "properties": {
          "markdown": {
            "type": "object",
            "description": "Markdown content part of a manifest file",
            "properties": {
              "manifest": {
                "type": "string",
                "description": "Markdown content shown before installing the manifest",
                "example": "This is the content of the manifest.md file which contains the manifest descripton.\n"
              },
              "preinstall": {
                "type": "string",
                "deprecated": true,
                "description": "Markdown content to be displayed when showing the plan to install blueprint",
                "example": "This is the content of the preinstall.md file\n"
              },
              "postinstall": {
                "type": "string",
                "description": "Markdown content to be displayed when showing the plan to install blueprint",
                "example": "This is the content of the postinstall.md file\n"
              }
            }
          }
        }
      },
      "BlueprintInstallStatus": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "PARTIAL",
          "FAILED"
        ]
      },
      "FormattedErrorCodes": {
        "type": "string",
        "enum": [
          "dependency_extraction",
          "resource_not_found",
          "resource_fetch_api_error",
          "resource_fetch_unknown_error",
          "terraform_cli_process_error",
          "terraform_import_block_process_error",
          "terraform_init_error",
          "terraform_plan_error",
          "terraform_apply_error",
          "terraform_show_error",
          "generic_error"
        ]
      },
      "FormattedErrorData": {
        "type": "object",
        "properties": {
          "resource": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          }
        }
      },
      "FormattedError": {
        "type": "object",
        "properties": {
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "code": {
            "$ref": "#/components/schemas/FormattedErrorCodes"
          },
          "data": {
            "$ref": "#/components/schemas/FormattedErrorData"
          }
        }
      },
      "CallerIdentity": {
        "type": "object",
        "properties": {
          "name": {
            "description": "a human readable name of the caller (e.g. user name, token name or email address)",
            "example": "manifest@epilot.cloud"
          },
          "org_id": {
            "description": "epilot organization id",
            "type": "string",
            "example": "911690"
          },
          "user_id": {
            "description": "epilot user id, when called by a user",
            "type": "string",
            "example": "11001045"
          },
          "token_id": {
            "description": "token id, when called by API token",
            "type": "string",
            "example": "api_5ZugdRXasLfWBypHi93Fk"
          }
        },
        "required": [
          "org_id"
        ]
      },
      "SelectedResources": {
        "type": "object",
        "properties": {
          "exported_root_resources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "type": {
                  "$ref": "#/components/schemas/ResourceNodeType"
                }
              },
              "required": [
                "id",
                "type"
              ]
            }
          },
          "selected_resources": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "pipeline_id": {
            "type": "string",
            "description": "Pipeline ID selected when doing the sandbox sync"
          }
        },
        "required": [
          "exported_root_resources",
          "selected_resources"
        ]
      },
      "ResourceReplacement": {
        "type": "object",
        "properties": {
          "originalAddress": {
            "type": "string",
            "description": "Original resource ID to be replaced"
          },
          "replacementId": {
            "type": "string",
            "description": "ID of the resource that will replace the original"
          },
          "replacementName": {
            "type": "string",
            "description": "Name of the resource that will replace the original"
          }
        },
        "required": [
          "originalAddress",
          "replacementId"
        ]
      },
      "PutManifestPayload": {
        "type": "object",
        "properties": {
          "source_blueprint_name": {
            "type": "string",
            "description": "Name of the source blueprint"
          },
          "markdown": {
            "type": "string",
            "description": "Markdown content of the manifest"
          },
          "ready_resources": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of ids of resources selected to be ready by the user"
          }
        }
      }
    },
    "parameters": {
      "JobID": {
        "name": "job_id",
        "in": "path",
        "required": true,
        "description": "ID of an import or export job",
        "schema": {
          "$ref": "#/components/schemas/JobID"
        }
      }
    },
    "securitySchemes": {
      "EpilotAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Authorization header with epilot OAuth2 bearer token",
        "bearerFormat": "JWT"
      }
    }
  }
}
