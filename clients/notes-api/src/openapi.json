{
  "openapi": "3.0.2",
  "info": {
    "version": "2.0.0",
    "title": "Notes API",
    "description": "Facade API Backend for Epilot Notes feature"
  },
  "servers": [
    {
      "url": "https://ommtj50yc5.execute-api.eu-central-1.amazonaws.com"
    }
  ],
  "tags": [
    {
      "name": "Notes"
    }
  ],
  "security": [
    {
      "EpilotAuth": []
    }
  ],
  "paths": {
    "/v1/note": {
      "post": {
        "operationId": "createNote",
        "summary": "createNote",
        "description": "Creates a new Note entry",
        "tags": [
          "Notes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "_tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Tags associated with this Note"
                  },
                  "_acl": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "description": "Access Control List for this Note entry"
                  },
                  "_owners": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "org_id": {
                          "type": "string"
                        },
                        "user_id": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "org_id",
                        "user_id"
                      ]
                    }
                  },
                  "entity_id": {
                    "type": "string",
                    "description": "The Entity ID of the Entity this note will be contextually attached to"
                  },
                  "parent_id": {
                    "type": "string",
                    "description": "The Entity ID of the Note's parent Note. If supplied, the Note will be a comment to the parent Note. Be aware that Notes can only have comments one level deep"
                  },
                  "content": {
                    "type": "string",
                    "description": "The content of the Note"
                  }
                },
                "required": [
                  "entity_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with Note content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteEntity"
                }
              }
            }
          }
        }
      }
    },
    "/v1/note/{id}": {
      "get": {
        "operationId": "getNote",
        "summary": "getNote",
        "description": "Retrieves a single Note entry based on it's Entity ID",
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Entity ID of the Note entry to retrieve",
            "schema": {
              "type": "string",
              "description": "The Entity ID of the Note entry to retrieve"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "hydrate",
            "description": "Whether to hydrate the Note's relation attributes",
            "schema": {
              "type": "boolean",
              "description": "Whether to hydrate the Note's relation attributes"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with Note content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteEntity"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchNote",
        "summary": "patchNote",
        "description": "Updates an existing Note entry",
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Entity ID of the Note entry to update",
            "schema": {
              "type": "string",
              "description": "The Entity ID of the Note entry to update"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Entity"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with Note content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteEntity"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteNote",
        "summary": "deleteNote",
        "description": "Deletes a single Note entry based on it's Entity ID",
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Entity ID of the Note entry to delete",
            "schema": {
              "type": "string",
              "description": "The Entity ID of the Note entry to delete"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with the deleted Note entity"
          }
        }
      }
    },
    "/v1/notes/{context_id}": {
      "get": {
        "operationId": "getNotesByContext",
        "summary": "getNotesByContext",
        "description": "Given a `context_type`, returns a list of Notes that belong to that context within the specified `id`",
        "tags": [
          "Notes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "context_id",
            "description": "ID of the context to from which to retrive Notes. This is the Entity ID when `context_type=entity` and the Workflow definition ID when `context_type=workflows`",
            "schema": {
              "type": "string",
              "description": "ID of the context to from which to retrive Notes. This is the Entity ID when `context_type=entity` and the Workflow definition ID when `context_type=workflows`"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "context_type",
            "description": "Type of context to retrieve Notes within the targeted Entity",
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/ContextType"
                }
              ],
              "description": "Type of context to retrieve Notes within the targeted Entity"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "sort",
            "description": "The sort order of the returned Notes, expressed as a Lucene query",
            "schema": {
              "type": "string",
              "default": "updated_at:desc",
              "description": "The sort order of the returned Notes, expressed as a Lucene query"
            }
          },
          {
            "in": "query",
            "name": "from",
            "description": "The index of the first Note to return in this query",
            "schema": {
              "type": "number",
              "default": 0,
              "description": "The index of the first Note to return in this query"
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The number of Note entries to return in this query",
            "schema": {
              "type": "number",
              "default": 10,
              "description": "The number of Note entries to return in this query"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with Note content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotesResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "EpilotAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Authorization header with epilot OAuth2 bearer token",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "NoteEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          }
        ],
        "type": "object",
        "properties": {
          "context_entities": {
            "type": "object",
            "properties": {
              "$relation": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "entity_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "entity_id"
                  ]
                }
              }
            },
            "required": [
              "$relation"
            ]
          },
          "parent": {
            "type": "object",
            "properties": {
              "$relation": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "entity_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "entity_id"
                  ]
                }
              }
            },
            "required": [
              "$relation"
            ]
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteEntity"
            }
          },
          "content": {
            "type": "string",
            "description": "The content of the Note"
          }
        },
        "required": [
          "context_entities",
          "parent"
        ],
        "description": "A note Entity object cotaining Entity metadata and content in a LexicalNode format"
      },
      "Entity": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Entity ID of the Note entry"
          },
          "_org": {
            "type": "string",
            "description": "ID of the Organization that owns this Note"
          },
          "_schema": {
            "type": "string",
            "description": "The Entity schema of this Note"
          },
          "_created_at": {
            "type": "string",
            "description": "The timestamp of when this Note was created",
            "format": "date-time"
          },
          "_updated_at": {
            "type": "string",
            "description": "The timestamp of when this Note was last updated",
            "format": "date-time"
          },
          "_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with this Note"
          },
          "_acl": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Access Control List for this Note entry"
          },
          "_owners": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "org_id": {
                  "type": "string"
                },
                "user_id": {
                  "type": "string"
                }
              },
              "required": [
                "org_id",
                "user_id"
              ]
            }
          }
        },
        "description": "Base Entity schema"
      },
      "ContextType": {
        "type": "string",
        "enum": [
          "opportunity",
          "workflows"
        ]
      },
      "NotesResponse": {
        "type": "object",
        "properties": {
          "hits": {
            "type": "number",
            "description": "The number of Note entries returned in this query"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteEntity"
            },
            "description": "The Note entries returned in this query"
          }
        },
        "required": [
          "hits",
          "results"
        ]
      }
    }
  }
}
